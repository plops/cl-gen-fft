#include <algorithm>
#include <array>
#include <cmath>
#include <complex>
#include <iomanip>
#include <iostream>
enum Constants { M_MAG_N = 512 };

std::array<std::complex<float>, M_MAG_N> m_fft_in = {
    {(0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f)}};
std::array<std::complex<float>, M_MAG_N> m_fft_out = {
    {(0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f)}};
std::array<std::complex<float>, M_MAG_N> m_fft_out2 = {
    {(0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f)}};
std::array<float, M_MAG_N> m_fft_out_mag = {
    {(0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f), (0.0e+0f),
     (0.0e+0f), (0.0e+0f)}};

template <std::size_t N>
void ft(const std::array<std::complex<float>, N> &in,
        std::array<std::complex<float>, N> &out) {
  for (unsigned int k = 0; (k < N); k += 1) {
    out[k] = 0;
  }
  for (unsigned int k = 0; (k < N); k += 1) {
    for (unsigned int n = 0; (n < N); n += 1) {
      out[k] +=
          (std::exp(std::complex<float>((0.0e+0f), ((M_PI * -2 * k * n) / N))) *
           in[n]);
    }
  }
}
template <std::size_t N>
void bit_reverse_copy(const std::array<std::complex<float>, N> &in,
                      std::array<std::complex<float>, N> &out) {
  out[0] = in[0];
  out[256] = in[1];
  out[128] = in[2];
  out[384] = in[3];
  out[64] = in[4];
  out[320] = in[5];
  out[192] = in[6];
  out[448] = in[7];
  out[32] = in[8];
  out[288] = in[9];
  out[160] = in[10];
  out[416] = in[11];
  out[96] = in[12];
  out[352] = in[13];
  out[224] = in[14];
  out[480] = in[15];
  out[16] = in[16];
  out[272] = in[17];
  out[144] = in[18];
  out[400] = in[19];
  out[80] = in[20];
  out[336] = in[21];
  out[208] = in[22];
  out[464] = in[23];
  out[48] = in[24];
  out[304] = in[25];
  out[176] = in[26];
  out[432] = in[27];
  out[112] = in[28];
  out[368] = in[29];
  out[240] = in[30];
  out[496] = in[31];
  out[8] = in[32];
  out[264] = in[33];
  out[136] = in[34];
  out[392] = in[35];
  out[72] = in[36];
  out[328] = in[37];
  out[200] = in[38];
  out[456] = in[39];
  out[40] = in[40];
  out[296] = in[41];
  out[168] = in[42];
  out[424] = in[43];
  out[104] = in[44];
  out[360] = in[45];
  out[232] = in[46];
  out[488] = in[47];
  out[24] = in[48];
  out[280] = in[49];
  out[152] = in[50];
  out[408] = in[51];
  out[88] = in[52];
  out[344] = in[53];
  out[216] = in[54];
  out[472] = in[55];
  out[56] = in[56];
  out[312] = in[57];
  out[184] = in[58];
  out[440] = in[59];
  out[120] = in[60];
  out[376] = in[61];
  out[248] = in[62];
  out[504] = in[63];
  out[4] = in[64];
  out[260] = in[65];
  out[132] = in[66];
  out[388] = in[67];
  out[68] = in[68];
  out[324] = in[69];
  out[196] = in[70];
  out[452] = in[71];
  out[36] = in[72];
  out[292] = in[73];
  out[164] = in[74];
  out[420] = in[75];
  out[100] = in[76];
  out[356] = in[77];
  out[228] = in[78];
  out[484] = in[79];
  out[20] = in[80];
  out[276] = in[81];
  out[148] = in[82];
  out[404] = in[83];
  out[84] = in[84];
  out[340] = in[85];
  out[212] = in[86];
  out[468] = in[87];
  out[52] = in[88];
  out[308] = in[89];
  out[180] = in[90];
  out[436] = in[91];
  out[116] = in[92];
  out[372] = in[93];
  out[244] = in[94];
  out[500] = in[95];
  out[12] = in[96];
  out[268] = in[97];
  out[140] = in[98];
  out[396] = in[99];
  out[76] = in[100];
  out[332] = in[101];
  out[204] = in[102];
  out[460] = in[103];
  out[44] = in[104];
  out[300] = in[105];
  out[172] = in[106];
  out[428] = in[107];
  out[108] = in[108];
  out[364] = in[109];
  out[236] = in[110];
  out[492] = in[111];
  out[28] = in[112];
  out[284] = in[113];
  out[156] = in[114];
  out[412] = in[115];
  out[92] = in[116];
  out[348] = in[117];
  out[220] = in[118];
  out[476] = in[119];
  out[60] = in[120];
  out[316] = in[121];
  out[188] = in[122];
  out[444] = in[123];
  out[124] = in[124];
  out[380] = in[125];
  out[252] = in[126];
  out[508] = in[127];
  out[2] = in[128];
  out[258] = in[129];
  out[130] = in[130];
  out[386] = in[131];
  out[66] = in[132];
  out[322] = in[133];
  out[194] = in[134];
  out[450] = in[135];
  out[34] = in[136];
  out[290] = in[137];
  out[162] = in[138];
  out[418] = in[139];
  out[98] = in[140];
  out[354] = in[141];
  out[226] = in[142];
  out[482] = in[143];
  out[18] = in[144];
  out[274] = in[145];
  out[146] = in[146];
  out[402] = in[147];
  out[82] = in[148];
  out[338] = in[149];
  out[210] = in[150];
  out[466] = in[151];
  out[50] = in[152];
  out[306] = in[153];
  out[178] = in[154];
  out[434] = in[155];
  out[114] = in[156];
  out[370] = in[157];
  out[242] = in[158];
  out[498] = in[159];
  out[10] = in[160];
  out[266] = in[161];
  out[138] = in[162];
  out[394] = in[163];
  out[74] = in[164];
  out[330] = in[165];
  out[202] = in[166];
  out[458] = in[167];
  out[42] = in[168];
  out[298] = in[169];
  out[170] = in[170];
  out[426] = in[171];
  out[106] = in[172];
  out[362] = in[173];
  out[234] = in[174];
  out[490] = in[175];
  out[26] = in[176];
  out[282] = in[177];
  out[154] = in[178];
  out[410] = in[179];
  out[90] = in[180];
  out[346] = in[181];
  out[218] = in[182];
  out[474] = in[183];
  out[58] = in[184];
  out[314] = in[185];
  out[186] = in[186];
  out[442] = in[187];
  out[122] = in[188];
  out[378] = in[189];
  out[250] = in[190];
  out[506] = in[191];
  out[6] = in[192];
  out[262] = in[193];
  out[134] = in[194];
  out[390] = in[195];
  out[70] = in[196];
  out[326] = in[197];
  out[198] = in[198];
  out[454] = in[199];
  out[38] = in[200];
  out[294] = in[201];
  out[166] = in[202];
  out[422] = in[203];
  out[102] = in[204];
  out[358] = in[205];
  out[230] = in[206];
  out[486] = in[207];
  out[22] = in[208];
  out[278] = in[209];
  out[150] = in[210];
  out[406] = in[211];
  out[86] = in[212];
  out[342] = in[213];
  out[214] = in[214];
  out[470] = in[215];
  out[54] = in[216];
  out[310] = in[217];
  out[182] = in[218];
  out[438] = in[219];
  out[118] = in[220];
  out[374] = in[221];
  out[246] = in[222];
  out[502] = in[223];
  out[14] = in[224];
  out[270] = in[225];
  out[142] = in[226];
  out[398] = in[227];
  out[78] = in[228];
  out[334] = in[229];
  out[206] = in[230];
  out[462] = in[231];
  out[46] = in[232];
  out[302] = in[233];
  out[174] = in[234];
  out[430] = in[235];
  out[110] = in[236];
  out[366] = in[237];
  out[238] = in[238];
  out[494] = in[239];
  out[30] = in[240];
  out[286] = in[241];
  out[158] = in[242];
  out[414] = in[243];
  out[94] = in[244];
  out[350] = in[245];
  out[222] = in[246];
  out[478] = in[247];
  out[62] = in[248];
  out[318] = in[249];
  out[190] = in[250];
  out[446] = in[251];
  out[126] = in[252];
  out[382] = in[253];
  out[254] = in[254];
  out[510] = in[255];
  out[1] = in[256];
  out[257] = in[257];
  out[129] = in[258];
  out[385] = in[259];
  out[65] = in[260];
  out[321] = in[261];
  out[193] = in[262];
  out[449] = in[263];
  out[33] = in[264];
  out[289] = in[265];
  out[161] = in[266];
  out[417] = in[267];
  out[97] = in[268];
  out[353] = in[269];
  out[225] = in[270];
  out[481] = in[271];
  out[17] = in[272];
  out[273] = in[273];
  out[145] = in[274];
  out[401] = in[275];
  out[81] = in[276];
  out[337] = in[277];
  out[209] = in[278];
  out[465] = in[279];
  out[49] = in[280];
  out[305] = in[281];
  out[177] = in[282];
  out[433] = in[283];
  out[113] = in[284];
  out[369] = in[285];
  out[241] = in[286];
  out[497] = in[287];
  out[9] = in[288];
  out[265] = in[289];
  out[137] = in[290];
  out[393] = in[291];
  out[73] = in[292];
  out[329] = in[293];
  out[201] = in[294];
  out[457] = in[295];
  out[41] = in[296];
  out[297] = in[297];
  out[169] = in[298];
  out[425] = in[299];
  out[105] = in[300];
  out[361] = in[301];
  out[233] = in[302];
  out[489] = in[303];
  out[25] = in[304];
  out[281] = in[305];
  out[153] = in[306];
  out[409] = in[307];
  out[89] = in[308];
  out[345] = in[309];
  out[217] = in[310];
  out[473] = in[311];
  out[57] = in[312];
  out[313] = in[313];
  out[185] = in[314];
  out[441] = in[315];
  out[121] = in[316];
  out[377] = in[317];
  out[249] = in[318];
  out[505] = in[319];
  out[5] = in[320];
  out[261] = in[321];
  out[133] = in[322];
  out[389] = in[323];
  out[69] = in[324];
  out[325] = in[325];
  out[197] = in[326];
  out[453] = in[327];
  out[37] = in[328];
  out[293] = in[329];
  out[165] = in[330];
  out[421] = in[331];
  out[101] = in[332];
  out[357] = in[333];
  out[229] = in[334];
  out[485] = in[335];
  out[21] = in[336];
  out[277] = in[337];
  out[149] = in[338];
  out[405] = in[339];
  out[85] = in[340];
  out[341] = in[341];
  out[213] = in[342];
  out[469] = in[343];
  out[53] = in[344];
  out[309] = in[345];
  out[181] = in[346];
  out[437] = in[347];
  out[117] = in[348];
  out[373] = in[349];
  out[245] = in[350];
  out[501] = in[351];
  out[13] = in[352];
  out[269] = in[353];
  out[141] = in[354];
  out[397] = in[355];
  out[77] = in[356];
  out[333] = in[357];
  out[205] = in[358];
  out[461] = in[359];
  out[45] = in[360];
  out[301] = in[361];
  out[173] = in[362];
  out[429] = in[363];
  out[109] = in[364];
  out[365] = in[365];
  out[237] = in[366];
  out[493] = in[367];
  out[29] = in[368];
  out[285] = in[369];
  out[157] = in[370];
  out[413] = in[371];
  out[93] = in[372];
  out[349] = in[373];
  out[221] = in[374];
  out[477] = in[375];
  out[61] = in[376];
  out[317] = in[377];
  out[189] = in[378];
  out[445] = in[379];
  out[125] = in[380];
  out[381] = in[381];
  out[253] = in[382];
  out[509] = in[383];
  out[3] = in[384];
  out[259] = in[385];
  out[131] = in[386];
  out[387] = in[387];
  out[67] = in[388];
  out[323] = in[389];
  out[195] = in[390];
  out[451] = in[391];
  out[35] = in[392];
  out[291] = in[393];
  out[163] = in[394];
  out[419] = in[395];
  out[99] = in[396];
  out[355] = in[397];
  out[227] = in[398];
  out[483] = in[399];
  out[19] = in[400];
  out[275] = in[401];
  out[147] = in[402];
  out[403] = in[403];
  out[83] = in[404];
  out[339] = in[405];
  out[211] = in[406];
  out[467] = in[407];
  out[51] = in[408];
  out[307] = in[409];
  out[179] = in[410];
  out[435] = in[411];
  out[115] = in[412];
  out[371] = in[413];
  out[243] = in[414];
  out[499] = in[415];
  out[11] = in[416];
  out[267] = in[417];
  out[139] = in[418];
  out[395] = in[419];
  out[75] = in[420];
  out[331] = in[421];
  out[203] = in[422];
  out[459] = in[423];
  out[43] = in[424];
  out[299] = in[425];
  out[171] = in[426];
  out[427] = in[427];
  out[107] = in[428];
  out[363] = in[429];
  out[235] = in[430];
  out[491] = in[431];
  out[27] = in[432];
  out[283] = in[433];
  out[155] = in[434];
  out[411] = in[435];
  out[91] = in[436];
  out[347] = in[437];
  out[219] = in[438];
  out[475] = in[439];
  out[59] = in[440];
  out[315] = in[441];
  out[187] = in[442];
  out[443] = in[443];
  out[123] = in[444];
  out[379] = in[445];
  out[251] = in[446];
  out[507] = in[447];
  out[7] = in[448];
  out[263] = in[449];
  out[135] = in[450];
  out[391] = in[451];
  out[71] = in[452];
  out[327] = in[453];
  out[199] = in[454];
  out[455] = in[455];
  out[39] = in[456];
  out[295] = in[457];
  out[167] = in[458];
  out[423] = in[459];
  out[103] = in[460];
  out[359] = in[461];
  out[231] = in[462];
  out[487] = in[463];
  out[23] = in[464];
  out[279] = in[465];
  out[151] = in[466];
  out[407] = in[467];
  out[87] = in[468];
  out[343] = in[469];
  out[215] = in[470];
  out[471] = in[471];
  out[55] = in[472];
  out[311] = in[473];
  out[183] = in[474];
  out[439] = in[475];
  out[119] = in[476];
  out[375] = in[477];
  out[247] = in[478];
  out[503] = in[479];
  out[15] = in[480];
  out[271] = in[481];
  out[143] = in[482];
  out[399] = in[483];
  out[79] = in[484];
  out[335] = in[485];
  out[207] = in[486];
  out[463] = in[487];
  out[47] = in[488];
  out[303] = in[489];
  out[175] = in[490];
  out[431] = in[491];
  out[111] = in[492];
  out[367] = in[493];
  out[239] = in[494];
  out[495] = in[495];
  out[31] = in[496];
  out[287] = in[497];
  out[159] = in[498];
  out[415] = in[499];
  out[95] = in[500];
  out[351] = in[501];
  out[223] = in[502];
  out[479] = in[503];
  out[63] = in[504];
  out[319] = in[505];
  out[191] = in[506];
  out[447] = in[507];
  out[127] = in[508];
  out[383] = in[509];
  out[255] = in[510];
  out[511] = in[511];
}
template <std::size_t N>
void fft(const std::array<std::complex<float>, N> &in,
         std::array<std::complex<float>, N> &out) {
  bit_reverse_copy(in, out);
  {
    const auto w_m = std::complex<float>((-1.e+0f), (-1.2246469e-16f));
    for (auto k = 0; (k < N); k += 2) {
      {
        std::complex<float> w(1);
        for (unsigned int j = 0; (j < 1); j += 1) {
          {
            auto t((w * out[(k + j + 1)]));
            auto u(out[(k + j)]);
            out[(k + j)] = (u + t);
            out[(k + j + 1)] = (u - t);
            w = (w * w_m);
          }
        }
      }
    }
  }
  {
    const auto w_m = std::complex<float>((6.123234e-17f), (-1.e+0f));
    for (auto k = 0; (k < N); k += 4) {
      {
        std::complex<float> w(1);
        for (unsigned int j = 0; (j < 2); j += 1) {
          {
            auto t((w * out[(k + j + 2)]));
            auto u(out[(k + j)]);
            out[(k + j)] = (u + t);
            out[(k + j + 2)] = (u - t);
            w = (w * w_m);
          }
        }
      }
    }
  }
  {
    const auto w_m = std::complex<float>((7.0710677e-1f), (-7.0710677e-1f));
    for (auto k = 0; (k < N); k += 8) {
      {
        std::complex<float> w(1);
        for (unsigned int j = 0; (j < 4); j += 1) {
          {
            auto t((w * out[(k + j + 4)]));
            auto u(out[(k + j)]);
            out[(k + j)] = (u + t);
            out[(k + j + 4)] = (u - t);
            w = (w * w_m);
          }
        }
      }
    }
  }
  {
    const auto w_m = std::complex<float>((9.238795e-1f), (-3.8268343e-1f));
    for (auto k = 0; (k < N); k += 16) {
      {
        std::complex<float> w(1);
        for (unsigned int j = 0; (j < 8); j += 1) {
          {
            auto t((w * out[(k + j + 8)]));
            auto u(out[(k + j)]);
            out[(k + j)] = (u + t);
            out[(k + j + 8)] = (u - t);
            w = (w * w_m);
          }
        }
      }
    }
  }
  {
    const auto w_m = std::complex<float>((9.8078525e-1f), (-1.9509032e-1f));
    for (auto k = 0; (k < N); k += 32) {
      {
        std::complex<float> w(1);
        for (unsigned int j = 0; (j < 16); j += 1) {
          {
            auto t((w * out[(k + j + 16)]));
            auto u(out[(k + j)]);
            out[(k + j)] = (u + t);
            out[(k + j + 16)] = (u - t);
            w = (w * w_m);
          }
        }
      }
    }
  }
  {
    const auto w_m = std::complex<float>((9.951847e-1f), (-9.8017144e-2f));
    for (auto k = 0; (k < N); k += 64) {
      {
        std::complex<float> w(1);
        for (unsigned int j = 0; (j < 32); j += 1) {
          {
            auto t((w * out[(k + j + 32)]));
            auto u(out[(k + j)]);
            out[(k + j)] = (u + t);
            out[(k + j + 32)] = (u - t);
            w = (w * w_m);
          }
        }
      }
    }
  }
  {
    const auto w_m = std::complex<float>((9.9879545e-1f), (-4.9067676e-2f));
    for (auto k = 0; (k < N); k += 128) {
      {
        std::complex<float> w(1);
        for (unsigned int j = 0; (j < 64); j += 1) {
          {
            auto t((w * out[(k + j + 64)]));
            auto u(out[(k + j)]);
            out[(k + j)] = (u + t);
            out[(k + j + 64)] = (u - t);
            w = (w * w_m);
          }
        }
      }
    }
  }
  {
    const auto w_m = std::complex<float>((9.996988e-1f), (-2.4541229e-2f));
    for (auto k = 0; (k < N); k += 256) {
      {
        std::complex<float> w(1);
        for (unsigned int j = 0; (j < 128); j += 1) {
          {
            auto t((w * out[(k + j + 128)]));
            auto u(out[(k + j)]);
            out[(k + j)] = (u + t);
            out[(k + j + 128)] = (u - t);
            w = (w * w_m);
          }
        }
      }
    }
  }
  {
    const auto w_m = std::complex<float>((9.999247e-1f), (-1.22715384e-2f));
    for (auto k = 0; (k < N); k += 512) {
      {
        std::complex<float> w(1);
        for (unsigned int j = 0; (j < 256); j += 1) {
          {
            auto t((w * out[(k + j + 256)]));
            auto u(out[(k + j)]);
            out[(k + j)] = (u + t);
            out[(k + j + 256)] = (u - t);
            w = (w * w_m);
          }
        }
      }
    }
  }
}
int main() {
  for (unsigned int i = 0; (i < M_MAG_N); i += 1) {
    m_fft_in[i] = (0.0e+0f);
    m_fft_out[i] = (0.0e+0f);
    m_fft_out_mag[i] = (0.0e+0f);
  }
  m_fft_in[1] = (1.e+0f);
  ft(m_fft_in, m_fft_out);
  for (unsigned int i = 0; (i < M_MAG_N); i += 1) {
    m_fft_in[i] = (0.0e+0f);
    m_fft_out2[i] = (0.0e+0f);
    m_fft_out_mag[i] = (0.0e+0f);
  }
  m_fft_in[1] = (1.e+0f);
  fft(m_fft_in, m_fft_out2);
  for (unsigned int i = 0; (i < M_MAG_N); i += 1) {
    (std::cout << std::setw(6) << i << std::setw(30) << m_fft_out[i]
               << std::setw(30) << m_fft_out2[i] << std::endl);
  }
}